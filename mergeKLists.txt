
//合并k个有序链表
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
	
    ListNode* mergeKLists(vector<ListNode*>& lists) {
		if(lists.size()==0)
		{
			return NULL;
		}
		if(lists.size()==1)
		{
			return lists[0];
		}
		if(lists.size()==2)
		{
			return mergeTwoLists(lists[0],lists[1]);
		}
		int mid=lists.size()/2;
		vector<ListNode*> sublists1;
		vector<ListNode*> sublists2;
		for(int i=0;i<mid;i++)
		{
			sublists1.push_back(lists[i]);
		}
		for(int i=mid;i<lists.size();i++)
		{
			sublists2.push_back(lists[i]);
		}
		ListNode *l1=mergeKLists(sublists1);
		ListNode *l2=mergeKLists(sublists2);
		return mergeTwoLists(l1,l2);
        
    }
	ListNode* mergeTwoLists(ListNode *lists1,ListNode *lists2) {
		ListNode temp(0);
		ListNode *templists=&temp;
		while(lists1&&lists2)
		{
			if(lists1->val<=lists2->val)
			{
				templists->next=lists1;
				lists1=lists1->next;
			}
			else
			{
				templists->next=lists2;
				lists2=lists2->next;
			}
			templists=templists->next;
		}
		if(lists1)
		{
			templists->next=lists1;
		}
		if(lists2)
		{
			templists->next=lists2;
		}
		return temp.next;
    }

};




class Solution {
public:
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        if (lists.size() == 0) return NULL;
        int n = lists.size();
        while (n > 1) {
            int k = (n + 1) / 2;
            for (int i = 0; i < n / 2; ++i) {
                lists[i] = mergeTwoLists(lists[i], lists[i + k]);
            }
            n = k;
        }
        return lists[0];
    }
    
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
        ListNode *head = new ListNode(-1);
        ListNode *cur = head;
        while (l1 && l2) {
            if (l1->val < l2->val) {
                cur->next = l1;
                l1 = l1->next;
            } else {
                cur->next = l2;
                l2 = l2->next;
            }
            cur = cur->next;
        }
        if (l1) cur->next = l1;
        if (l2) cur->next = l2;
        return head->next;
    }
};