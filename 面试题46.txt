/**
面试题46. 把数字翻译成字符串
给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

 

示例 1:

输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"
 

提示：

0 <= num < 231

动态规划，定义dp[i]为 0 - i的划分方式，那么按照最后一个字母来进行分类。

首先最后一个数肯定可以解码为一个字母，种类数为dp[i - 1]
然后最后一个数和其前面一个数能否组合进行解码，需要满足两个条件：

前一个不为零
这两个组合起来，不超过25
满足之后的种类数为dp[i-2]
可以先在前面加一个前导零，避免边界特判
**/


class Solution {
public:
    int translateNum(int num) {
        string t = to_string(num);
        t  = '0' + t;
        int n = t.size();
        vector<int> dp(n, 0);
        dp[0] = 1;
        for(int i = 1; i < n;i ++){
            dp[i] += dp[i - 1];
            if(t[i - 1] != '0' && (t[i-1] - '0') * 10 + t[i] - '0' <= 25){
                dp[i] += dp[i-2];
            }
        }
        return dp[n-1];
    }
};

