/**
18. 四数之和
给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。

注意：

答案中不可以包含重复的四元组。

示例：

给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。

满足要求的四元组集合为：
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
**/

/**
执行用时 :256 ms, 在所有 C++ 提交中击败了5.02%的用户
内存消耗 :7.7 MB, 在所有 C++ 提交中击败了100.00%的用户
**/
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        if(nums.size()<4)
            return {};
        vector<vector<int>>result;  
        set<vector<int>> set_temp;
        for(int k=0;k<nums.size()-3;k++)
        {
            for(int i=k+1;i<nums.size()-2;i++)
            {
                int left=i+1;
                int right=nums.size()-1;
                while(left<right)
                {
                    if(k==0||nums[k]!=nums[k-1]||nums[i]!=nums[i-1])
                    {
                        int sum=nums[k]+nums[i]+nums[left]+nums[right];
                        vector<int> item;
                        if(target==sum)
                        {
                            item.push_back(nums[k]);
                            item.push_back(nums[i]);
                            item.push_back(nums[left]);
                            item.push_back(nums[right]);
                            if(set_temp.find(item)==set_temp.end())
                            {
                                result.push_back(item);
                                set_temp.insert(item);
                            }
                            left++;
                            right--;
                            while(left<right&&nums[left]==nums[left-1])
                                    left++;
                            while(left<right&&nums[right]==nums[right+1])
                                    right--;
                        }
                        else if(target>sum)
                        {
                            left++;
                        }
                        else 
                            right--;
                    }
                    else 
                        break;
                }
            }
        }
        return result;
    }
};