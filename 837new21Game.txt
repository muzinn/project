/***
837. 新21点
爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：

爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 每次抽取都是独立的，其结果具有相同的概率。

当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？

示例 1：

输入：N = 10, K = 1, W = 10
输出：1.00000
说明：爱丽丝得到一张卡，然后停止。
示例 2：

输入：N = 6, K = 1, W = 10
输出：0.60000
说明：爱丽丝得到一张卡，然后停止。
在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。
示例 3：

输入：N = 21, K = 17, W = 10
输出：0.73278
提示：

0 <= K <= N <= 10000
1 <= W <= 10000
如果答案与正确答案的误差不超过 10^-5，则该答案将被视为正确答案通过。
此问题的判断限制时间已经减少。
*/

class Solution {
public:
    double new21Game(int N, int K, int W) {
        if (K == 0) 
        {
            return 1.0;
        }
        vector<double> dp(K + W);
        for (int i = K; i <= N && i < K + W; i++) {
            dp[i] = 1.0;
        }
        dp[K - 1] = 1.0 * min(N - K + 1, W) / W;
        for (int i = K - 2; i >= 0; i--) {
            dp[i] = dp[i + 1] - (dp[i + W + 1] - dp[i + 1]) / W;
        }
        return dp[0];
    }
};



爱丽丝获胜的概率只和下一轮开始前的得分有关，因此根据得分计算概率。

令 dp[x]dp[x] 表示从得分为 xx 的情况开始游戏并且获胜的概率，目标是求 dp[0]dp[0] 的值。

根据规则，当分数达到或超过 KK 时游戏结束，游戏结束时，如果分数不超过 NN 则获胜，如果分数超过 NN 则失败。因此当 K\leq x\leq \min(N, K+W-1)K≤x≤min(N,K+W?1) 时有 dp[x]=1dp[x]=1，当 x>\min(N, K+W-1)x>min(N,K+W?1) 时有 dp[x]=0dp[x]=0。

为什么分界线是 \min(N, K+W-1)min(N,K+W?1)？首先，只有在分数不超过 NN 时才算获胜；其次，可以达到的最大分数为 K+W-1K+W?1，即在最后一次抽取数字之前的分数为 K-1K?1，并且抽到了 WW。

当 0\leq x < K0≤x<K 时，如何计算 dp[x]dp[x] 的值？注意到每次在范围 [1, W][1,W] 内随机抽取一个整数，且每个整数被抽取到的概率相等，因此可以得到如下状态转移方程：

dp[x]=\frac{dp[x+1]+dp[x+2]+\cdots+dp[x+W]}{W}
dp[x]= 
W
dp[x+1]+dp[x+2]+?+dp[x+W]
?	
 

根据状态转移方程，可以实现如下简单的动态规划：
