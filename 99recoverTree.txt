
/*二叉搜索树中的两个节点被错误地交换。

请在不改变其结构的情况下，恢复这棵树。
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        //中序遍历二叉树
        vector<int >nums;
        vector<int>temp;
        nums=inorder(root);
        temp=searchloc(nums);
        recover(root, 2, temp[0], temp[1]);

    }

    void recover(TreeNode* root, int count, int x, int y) {
    if (root) {
      if (root->val == x || root->val == y) 
      {
        root->val = root->val == x ? y : x;
        if (--count == 0) 
            return;
      }
      recover(root->left, count, x, y);
      recover(root->right, count, x, y);
    }
  }


    //中序遍历二叉树
    vector<int > inorder(TreeNode* root)
    {
        stack<TreeNode *> s;
        vector<int> result;
        TreeNode *node=root;
        while(node||!s.empty())
        {
            while(node)
            {
                s.push(node);
                node=node->left;
            }
            node=s.top();
            s.pop();
            result.push_back(node->val);
            node=node->right;
        }
        return result;
    }
    //找出不是顺序排序的数组的位置；
    vector<int> searchloc(vector<int>&nums)
    {
        int x=-1;
        int y=-1;
        vector<int >res;
        for(int i = 0;i <nums.size()-1; ++i) 
        {
            if(nums[i]>nums[i+1])
            {
                y=nums[i+1];
                if(x==-1)
                    x=nums[i];
                else
                    break;
            }
        }
        res.push_back(x);
        res.push_back(y);
        return  res;
        
    }
};