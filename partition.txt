/*
分隔链表
给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。

你应当保留两个分区中每个节点的初始相对位置。
输入: head = 1->4->3->2->5->2, x = 3
输出: 1->2->2->4->3->5
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode lesstemp(0);
        ListNode moretemp(0);
        ListNode* less=&lesstemp;
		ListNode* more=&moretemp;
		if(!head)
			return NULL;
		while(head)
		{
			if(head->val<x)
			{
				less->next=head;
				less=head;				
			}
			else{
				more->next=head;
				more=head;				
			}
			head=head->next;
		}
		less->next=moretemp.next;
		more->next=NULL;
		return lesstemp.next;
		
    }
};


/*
面试题02.04分割链表
编写程序以 x 为基准分割链表，使得所有小于 x 的节点排在大于或等于 x 的
节点之前。如果链表中包含 x，x 只需出现在小于 x 的元素之后(如下所示)。
分割元素 x 只需处于“右半部分”即可，其不需要被置于左右两部分之间。

输入: head = 3->5->8->5->10->2->1, x = 5
输出: 3->1->2->10->5->5->8
*/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
		ListNode lesstemp(0);
        ListNode moretemp(0);
        ListNode* less=&lesstemp;
		ListNode* more=&moretemp;
		if(!head)
			return NULL;
		while(head)
		{
			if(head->val<x)
			{
				less->next=head;
				less=head;				
			}
			else{
				more->next=head;
				more=head;				
			}
			head=head->next;
		}
		less->next=moretemp.next;
		more->next=NULL;
		return lesstemp.next;
    }
};