/*给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。

说明：解集不能包含重复的子集。*/

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<int >temp;
        vector<vector<int>> result;
        result.push_back(temp);
        gerensubsets(0,nums,temp,result);
        return result;
    }
    void gerensubsets(int i,vector<int>& nums,vector<int >&temp,vector<vector<int>> &result)
    {
        if(i==nums.size())
            return;
        temp.push_back(nums[i]);
        result.push_back(temp);
        gerensubsets(i+1,nums,temp,result);
        temp.pop_back();
        gerensubsets(i+1,nums,temp,result);
    }
};
/*给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。

说明：解集不能包含重复的子集。*/

class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<int >temp;
        vector<vector<int>> result;
        result.push_back(temp);
        set<vector<int>> res_set;
        sort(nums.begin(),nums.end());
        gerensubsets(0,nums,temp,result,res_set);
        return result;
    }
    void gerensubsets(int i,vector<int>& nums,vector<int >&temp,vector<vector<int>> &result,set<vector<int>> &res_set)
    {
        if(i==nums.size())
            return;
        temp.push_back(nums[i]);
        if(res_set.find(temp)==res_set.end())
        {
            result.push_back(temp);
            res_set.insert(temp);
        }
        gerensubsets(i+1,nums,temp,result,res_set);
        temp.pop_back();
        gerensubsets(i+1,nums,temp,result,res_set);
    }
};