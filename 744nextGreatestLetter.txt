/*
744. 寻找比目标字母大的最小字母
给你一个排序后的字符列表 letters ，列表中只包含小写英文字母。另给出一个目标字母 target，请你寻找在这一有序列表里比目标字母大的最小字母。

在比较时，字母是依序循环出现的。举个例子：

如果目标字母 target = 'z' 并且字符列表为 letters = ['a', 'b']，则答案返回 'a'
 

示例：

输入:
letters = ["c", "f", "j"]
target = "a"
输出: "c"

输入:
letters = ["c", "f", "j"]
target = "c"
输出: "f"

输入:
letters = ["c", "f", "j"]
target = "d"
输出: "f"

输入:
letters = ["c", "f", "j"]
target = "g"
输出: "j"

输入:
letters = ["c", "f", "j"]
target = "j"
输出: "c"

输入:
letters = ["c", "f", "j"]
target = "k"
输出: "c"
 

提示：

letters长度范围在[2, 10000]区间内。
letters 仅由小写字母组成，最少包含两个不同的字母。
目标字母target 是一个小写字母。


对下标做二分，找到第一个大于target值的下标
target可能比letters中所有字符都小，也可能比letters中所有字符都大,因此第一个大于target值的下标的取值范围为[0, letters.size()]，因此left = 0, right = letters.size();
当left == right时退出， 因此循环条件为while(left <right)
当letters[mid]  >target时， mid是可能结果，大于mid的都可以舍弃，所有right = mid
当letters[mid] <= target时， mid不在候选集中，因此left = mid+1, 舍弃小于等于mid的下标
当循环退出时，left = right = 待选下标， 注意当targets大于letters中所有元素时， left = letters.size()，此时要返回letters[0];

*/
class Solution {
public:
    char nextGreatestLetter(vector<char>& letters, char target) {
        int left=0;
        int right=letters.size();
        int index=0;
        while(left<right)
        {
            int mid=left+(right-left)/2;
            if(letters[mid]>target)
            {
                right=mid;
            }
            else 
            {
                left=mid+1;
            }
        }
        if (left == letters.size()) 
            return letters[0];
        return letters[left];
    }
};


class Solution {
public:
    char nextGreatestLetter(vector<char>& letters, char target) {
        int left=0;
        int right=letters.size()-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(letters[mid]>target)
            {
                right=mid-1;
            }
            else 
            {
                left=mid+1;
            }
        }
        if (left == letters.size()) 
            return letters[0];
        return letters[left];
    }
};